{"version":3,"sources":["components/NavMessage/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/ClickItem/index.js","components/Footer/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["NavMessage","state","message","animating","renderMessage","_this","prevState","score","_ref","topScore","newState","this","props","setState","_this2","react_default","a","createElement","className","onAnimationEnd","Component","Nav","href","components_NavMessage","Header","Container","children","ClickItem","role","aria-label","onClick","handleClick","id","style","backgroundImage","concat","image","shake","Footer","alt","src","Game","data","handleCorrectGuess","newData","_this$state","newScore","newTopScore","Math","max","shuffleData","handleIncorrectGuess","resetData","map","item","Object","objectSpread","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","components_Nav","components_Header","components_Container","components_ClickItem","key","components_Footer","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e8d3f6a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\n// NavMessage renders an li tag containing an message for the user\n\nclass NavMessage extends Component {\n    state = {\n        message: \"\",\n        animating: false\n    };\n\n    componentDidUpdate({ score, topScore }, prevState) {\n        const newState = { animating: true };\n\n        if (score === 0 && topScore === 0) {\n            newState.message = \"\";\n        } else if (score === 0 && topScore > 0) {\n            newState.message = \"incorrect\";\n        } else {\n            newState.message = \"correct\";\n        }\n\n        if (score !== this.props.score || this.state.message !== newState.message) {\n            this.setState(newState);\n        }\n    }\n\n    renderMessage = () => {\n        switch (this.state.message) {\n            case \"correct\":\n                return \"You guessed correctly!\";\n            case \"incorrect\":\n                return \"You guessed incorrectly!\";\n            default:\n                return \"Click an image to begin!\";\n        }\n    };\n\n    render() {\n        return (\n            <li\n                className={this.state.animating ? this.state.message : \"\"}\n                onAnimationEnd={() => this.setState({ animating: false })}\n            >\n                {this.renderMessage()}\n            </li>\n        );\n    }\n}\n\nexport default NavMessage;","import React from \"react\";\nimport NavMessage from \"../NavMessage\";\nimport \"./style.css\";\n\n// Component for the Navbar\n\nfunction Nav(props) {\n    return (\n        <nav className=\"navbar\">\n            <ul>\n                <li className=\"brand\">\n                    <a href=\"/\">Clicky Game</a>\n                </li>\n                <NavMessage score={props.score} topScore={props.topScore} />\n                <li>\n                    Score: {props.score} | Top Score: {props.topScore}\n                </li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <h1>Clicky Game!</h1>\n            <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n        </header>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n    return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickItem(props) {\n    return (\n        <div\n            role=\"img\"\n            aria-label=\"click item\"\n            onClick={() => props.handleClick(props.id)}\n            style={{ backgroundImage: `url(\"${props.image}\")` }}\n            className={`click-item${props.shake ? \" shake\" : \"\"}`}\n        />\n    );\n}\n\nexport default ClickItem;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <div className=\"bottom\">\n                Clicky Game! <img alt=\"react\" src=\"assets/images/react.svg\" />\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\";\nimport Container from \"../Container\";\nimport ClickItem from \"../ClickItem\";\nimport Footer from \"../Footer\";\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n    state = {\n        data,\n        score: 0,\n        topScore: 0\n    };\n\n    componentDidMount() {\n        this.setState({ data: this.shuffleData(this.state.data) });\n    }\n\n    handleCorrectGuess = newData => {\n        const { topScore, score } = this.state;\n        const newScore = score + 1;\n        const newTopScore = Math.max(newScore, topScore);\n\n        this.setState({\n            data: this.shuffleData(newData),\n            score: newScore,\n            topScore: newTopScore\n        });\n    };\n\n    handleIncorrectGuess = data => {\n        this.setState({\n            data: this.resetData(data),\n            score: 0\n        });\n    };\n\n    resetData = data => {\n        const resetData = data.map(item => ({ ...item, clicked: false }));\n        return this.shuffleData(resetData);\n    };\n\n    shuffleData = data => {\n        let i = data.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = data[i];\n            data[i] = data[j];\n            data[j] = temp;\n            i--;\n        }\n        return data;\n    };\n\n    handleItemClick = id => {\n        let guessedCorrectly = false;\n        const newData = this.state.data.map(item => {\n            const newItem = { ...item };\n            if (newItem.id === id) {\n                if (!newItem.clicked) {\n                    newItem.clicked = true;\n                    guessedCorrectly = true;\n                }\n            }\n            return newItem;\n        });\n        guessedCorrectly\n            ? this.handleCorrectGuess(newData)\n            : this.handleIncorrectGuess(newData);\n    };\n\n    render() {\n        return (\n            <div>\n                <Nav score={this.state.score} topScore={this.state.topScore} />\n                <Header />\n                <Container>\n                    {this.state.data.map(item => (\n                        <ClickItem\n                            key={item.id}\n                            id={item.id}\n                            shake={!this.state.score && this.state.topScore}\n                            handleClick={this.handleItemClick}\n                            image={item.image}\n                        />\n                    ))}\n                </Container>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game\";\n\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}